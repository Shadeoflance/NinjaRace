#version 150

uniform sampler2D texture;
uniform vec2 size;

in vec2 modelPos;

void main() {
	// Current texture coordinate
	float pixelWidth = 1 / size.x;
	float pixelHeight = 1 / size.y;
	vec4 pixel = vec4(texture2D(texture, modelPos));
	
	// Larger constant = bigger glow
	float glow = 5.0 * ((pixelWidth + pixelHeight) / 2.0);
	
	// The vector to contain the new, "bloomed" colour values
	vec4 bloom = vec4(0);
	
	// Loop over all the pixels on the texture in the area given by the constant in glow
	int count = 0;
	for(float x = modelPos.x - glow; x < modelPos.x + glow; x += pixelWidth)
	{
		for(float y = modelPos.y - glow; y < modelPos.y + glow; y += pixelHeight)
		{
			// Add that pixel's value to the bloom vector
			bloom += (texture2D(texture, vec2(x, y)) - 0.4) * 30.0;
			// Add 1 to the number of pixels sampled
			count++;
		}
	}
	// Divide by the number of pixels sampled to average out the value
	// The constant being multiplied with count here will dim the bloom effect a bit, with higher values
	// Clamp the value between a 0.0 to 1.0 range
	bloom = clamp(bloom / (count * 30), 0.0, 1.0);
	
	// Set the current fragment to the original texture pixel, with our bloom value added on
	gl_FragColor = pixel + bloom;
}
